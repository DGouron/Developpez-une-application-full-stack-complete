---
description: "Conventions pour le projet Monde de Dev"
globs: 
  - "src/**/*.ts"
  - "src/**/*.html"
---

architecture:
  domain:
    entities:
      location: "src/app/core/domain/entities"
      naming: "{Entity}.entity.ts"
      rules:
        - "Une entité = un fichier"
        - "Immutable par défaut (readonly)"
        - "Pas de logique métier complexe"
    
    types:
      location: "src/app/core/domain/types"
      naming: "{Type}.type.ts"
      rules:
        - "Types réutilisables"
        - "Préfixer les interfaces avec 'I'"
        - "Utiliser des types stricts"

    value-objects:
      location: "src/app/core/domain/value-objects"
      naming: "{Value}.vo.ts"
      rules:
        - "Immutable"
        - "Auto-validant"

  application:
    dtos:
      location: "src/app/core/application/dtos"
      naming: "{Dto}.dto.ts"
      rules:
        - "Conversion Entity <-> DTO explicite"
        - "Validation des données"

    ports:
      location: "src/app/core/application/ports"
      naming: "I{Port}.port.ts"
      rules:
        - "Interface pour l'inversion de dépendance"
        - "Un port = un cas d'usage"

  infrastructure:
    adapters:
      location: "src/app/core/infrastructure/adapters"
      naming: "{Adapter}.adapter.ts"
      rules:
        - "Implémentation des ports"
        - "Communication avec l'extérieur"

naming_conventions:
  types:
    entities: "PascalCase"
    interfaces: "IPascalCase"
    types: "TPascalCase"
    enums: "EPascalCase"
  
  files:
    entities: "kebab-case.entity.ts"
    types: "kebab-case.type.ts"
    interfaces: "kebab-case.interface.ts"
    value-objects: "kebab-case.vo.ts"

validation:
  rules:
    - "Validation au niveau DTO"
    - "Validation au niveau Value Object"
    - "Fail-fast pour les données invalides" 

conventions:
  frontend:
    types:
      - Utiliser des interfaces TypeScript pour définir les types
      - Utiliser les types utilitaires (Partial, Pick, Omit) pour les variations
      - Pas de DTOs - utiliser directement les types correspondant aux réponses API
      - Préfixer les types de modèles avec 'I' (ex: IUser)

    data-mapping:
      - Les transformations de données doivent être faites dans les services
      - Utiliser des helpers pour les transformations communes
      - Les composants ne doivent recevoir que les données déjà formatées 